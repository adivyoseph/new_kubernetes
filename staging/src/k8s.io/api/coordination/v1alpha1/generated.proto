/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.coordination.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/coordination/v1alpha1";

// LeaseCandidate defines a candidate for a lease object.
// Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.
message LeaseCandidate {
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec contains the specification of the Lease.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional LeaseCandidateSpec spec = 2;
}

// LeaseCandidateList is a list of Lease objects.
message LeaseCandidateList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is a list of schema objects.
  repeated LeaseCandidate items = 2;
}

// LeaseSpec is a specification of a Lease.
message LeaseCandidateSpec {
  // BinaryVersion is the binary version
  optional string binaryVersion = 5;

  // CompatibilityVersion is the compatibility version
  optional string compatiblityVersion = 6;

  // TargetLease is the name of the lease that the candidate can lead
  optional string targetLease = 7;

  // leaseDurationSeconds is a duration that candidates for a lease need
  // to wait to force acquire it. This is measure against time of last
  // observed renewTime.
  // +optional
  optional int32 leaseDurationSeconds = 2;

  // renewTime is the time that the LeaseCandidate was last updated.
  // Unlike Lease objects, candidates are not refreshed frequently.
  // Any time a Lease needs to do leader election, an annotation is sent
  // to all the candidates to renew their candidacy and update the
  // renewTime here.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.MicroTime renewTime = 4;
}

